// <auto-generated />
using System;
using Contratacion.Datos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Contratacion.Datos.Migrations
{
    [DbContext(typeof(ContratacionDbContext))]
    partial class ContratacionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Contratacion.Datos.Models.AplicantesVacante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AceptacionTerminos")
                        .HasColumnType("bit")
                        .HasColumnName("aceptacion_terminos");

                    b.Property<double?>("AspiracionSalarial")
                        .HasColumnType("float")
                        .HasColumnName("aspiracion_salarial");

                    b.Property<bool?>("CalificaEntrevista")
                        .HasColumnType("bit")
                        .HasColumnName("califica_entrevista");

                    b.Property<string>("ComentariosAplicante")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comentarios_aplicante");

                    b.Property<string>("ComentariosPrechequeo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comentarios_prechequeo");

                    b.Property<bool?>("EsDescartado")
                        .HasColumnType("bit")
                        .HasColumnName("es_descartado");

                    b.Property<bool?>("EsPrechequeado")
                        .HasColumnType("bit")
                        .HasColumnName("es_prechequeado");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime?>("FechaDescarte")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_descarte");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_modificacion");

                    b.Property<DateTime?>("FechaPrechequeo")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_prechequeo");

                    b.Property<string>("FormatoPrechequeo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("formato_prechequeo");

                    b.Property<int>("IdCandidato")
                        .HasColumnType("int")
                        .HasColumnName("id_candidato");

                    b.Property<int?>("IdMotivoDescarte")
                        .HasColumnType("int")
                        .HasColumnName("id_motivo_descarte");

                    b.Property<int>("IdVacante")
                        .HasColumnType("int")
                        .HasColumnName("id_vacante");

                    b.HasKey("Id");

                    b.HasIndex("IdMotivoDescarte");

                    b.HasIndex("IdVacante");

                    b.ToTable("AplicantesVacante", "seleccion");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ArchivoExterno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<DateTime?>("FechaRecepcion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_recepcion");

                    b.Property<int?>("IdExpediente")
                        .HasColumnType("int")
                        .HasColumnName("id_expediente");

                    b.Property<int?>("IdTipoDocumento")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_documento");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("observaciones");

                    b.Property<string>("Ruta")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ruta");

                    b.HasKey("Id");

                    b.HasIndex("IdExpediente");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("ArchivoExterno", "contratacion");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abreviacion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("abreviacion");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("descripcion");

                    b.Property<bool?>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado");

                    b.Property<int?>("IdCentro")
                        .HasColumnType("int")
                        .HasColumnName("id_centro");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("id_empresa");

                    b.Property<int?>("IdPadre")
                        .HasColumnType("int")
                        .HasColumnName("id_padre");

                    b.Property<int>("IdTipoArea")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_area");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoArea");

                    b.HasIndex(new[] { "Abreviacion" }, "UQ_area_abreviacion_areas")
                        .IsUnique();

                    b.HasIndex(new[] { "Codigo" }, "UQ_area_codigo_areas")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "UQ_area_id_areas")
                        .IsUnique();

                    b.ToTable("Areas", "configuracion");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Codigo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("codigo");

                    b.Property<string>("DescripcionGenerica")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("descripcion_generica");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaElaboracion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_elaboracion");

                    b.Property<int>("IdCategoriaCargo")
                        .HasColumnType("int")
                        .HasColumnName("id_categoria_cargo");

                    b.Property<int>("IdGrupoEscala")
                        .HasColumnType("int")
                        .HasColumnName("id_grupo_escala");

                    b.Property<int>("IdNivelEscolaridad")
                        .HasColumnType("int")
                        .HasColumnName("id_nivel_escolaridad");

                    b.Property<int?>("IdPadre")
                        .HasColumnType("int")
                        .HasColumnName("id_padre");

                    b.Property<int?>("IdSolicitante")
                        .HasColumnType("int")
                        .HasColumnName("Id_solicitante");

                    b.Property<int?>("IdTipoFuncionario")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_funcionario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("Observaciones")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("observaciones");

                    b.Property<double?>("SalarioBase")
                        .HasColumnType("float")
                        .HasColumnName("salario_base");

                    b.Property<double?>("SalarioHasta")
                        .HasColumnType("float")
                        .HasColumnName("salario_hasta");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoriaCargo");

                    b.HasIndex("IdNivelEscolaridad");

                    b.HasIndex("IdTipoFuncionario");

                    b.HasIndex(new[] { "Id" }, "UQ_cargo_id")
                        .IsUnique();

                    b.HasIndex(new[] { "Codigo" }, "cargos_uq")
                        .IsUnique()
                        .HasFilter("[codigo] IS NOT NULL");

                    b.HasIndex(new[] { "Codigo" }, "codigo");

                    b.ToTable("Cargos", "contratacion");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Catalogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPadre")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Catalogos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.DocumentosRequerido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Prerequisito")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DocumentosRequerido");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ElementosExterno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AspiracionSalarial")
                        .HasColumnType("float");

                    b.Property<int?>("CargoAspiradoId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Contratado")
                        .HasColumnType("int");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdCargoAspirado")
                        .HasColumnType("int");

                    b.Property<int?>("IdEstadoCivil")
                        .HasColumnType("int");

                    b.Property<int?>("IdRegionActual")
                        .HasColumnType("int");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nacionalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoSeguroSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumLicencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionActualId")
                        .HasColumnType("int");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CargoAspiradoId");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("RegionActualId");

                    b.ToTable("ElementosExternos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Especialidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("EstudioId")
                        .HasColumnType("int");

                    b.Property<int?>("IdEstudio")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstudioId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.EspecialidadExterno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternoId")
                        .HasColumnType("int");

                    b.Property<int?>("IdEspecialidad")
                        .HasColumnType("int");

                    b.Property<int?>("IdExterno")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("ExternoId");

                    b.ToTable("EspecialidadExternos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.EstudiosExterno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Completado")
                        .HasColumnType("bit");

                    b.Property<int?>("EstudioId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaIncio")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEstudio")
                        .HasColumnType("int");

                    b.Property<int>("IdExterno")
                        .HasColumnType("int");

                    b.Property<string>("Instituto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstudioId");

                    b.HasIndex("ExternoId");

                    b.ToTable("EstudiosExternos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Expediente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExternoId")
                        .HasColumnType("int");

                    b.Property<int?>("IdExterno")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternoId");

                    b.ToTable("Expedientes");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ExperienciaExterno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("CagoJefe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CargoDesempenado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("FichaLaboral")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("IdExterno")
                        .HasColumnType("int");

                    b.Property<string>("MotivoRetiro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreJefe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SueldoMensual")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ExternoId");

                    b.ToTable("ExperienciaExternos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Idioma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoIso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Seleccionado")
                        .HasColumnType("bit");

                    b.Property<bool?>("Traducido")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Idiomas");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.IdiomasExterno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("CalificativoId")
                        .HasColumnType("int");

                    b.Property<int?>("ElementoExternoId")
                        .HasColumnType("int");

                    b.Property<int?>("Escribir")
                        .HasColumnType("int");

                    b.Property<int?>("Escuchar")
                        .HasColumnType("int");

                    b.Property<int?>("Hablar")
                        .HasColumnType("int");

                    b.Property<int?>("IdCalificativo")
                        .HasColumnType("int");

                    b.Property<int>("IdExterno")
                        .HasColumnType("int");

                    b.Property<int>("IdIdioma")
                        .HasColumnType("int");

                    b.Property<int?>("Leer")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalificativoId");

                    b.HasIndex("ElementoExternoId");

                    b.ToTable("IdiomasExternos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.InicioSesionUsuario", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("InicioSesionProvedor");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ClaveProveedor");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NombreProveedor");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUsuario");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("InicioSesionUsuarios", "seguridad");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.MotivosDescarte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado_motivo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_modificacion");

                    b.Property<int>("IdUsuarioCreacion")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario_creacion");

                    b.Property<int?>("IdUsuarioModificacion")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario_modificacion");

                    b.Property<string>("NombreMotivo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre_motivo");

                    b.Property<string>("TextoJustificativo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("texto_justificativo");

                    b.HasKey("Id");

                    b.ToTable("MotivosDescarte", "seleccion");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ParametrosConfiguracion", b =>
                {
                    b.Property<int>("IdParametro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreParametro")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ValorFecha")
                        .HasColumnType("datetime");

                    b.Property<double?>("ValorNumerico")
                        .HasColumnType("float");

                    b.Property<string>("ValorTexto")
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("IdParametro");

                    b.ToTable("ParametrosConfiguracion", "seguridad");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ReclamacionRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TipoReclamacion");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ValorReclamacion");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("IdRol");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ReclamacionRoles", "seguridad");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ReclamacionUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TipoReclamacion");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ValorReclamacion");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUsuario");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReclamacionesUsuario", "seguridad");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ReferenciasExterno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElementoExternoId")
                        .HasColumnType("int");

                    b.Property<int?>("IdExterno")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoReferencia")
                        .HasColumnType("int");

                    b.Property<string>("NombreReferencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TipoReferenciaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElementoExternoId");

                    b.HasIndex("TipoReferenciaId");

                    b.ToTable("ReferenciasExterno");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Regiones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPadre")
                        .HasColumnType("int");

                    b.Property<string>("Latitud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Seleccionado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Regiones");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.RequisicionPersonal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Autorizado")
                        .HasColumnType("bit")
                        .HasColumnName("autorizado");

                    b.Property<bool?>("Cerrada")
                        .HasColumnType("bit")
                        .HasColumnName("cerrada");

                    b.Property<string>("DescripcionRequisicion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion_requisicion");

                    b.Property<string>("DetalleJustificacion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("detalle_justificacion");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_modificacion");

                    b.Property<DateTime>("FechaRequisicion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_requisicion");

                    b.Property<DateTime?>("FinMotivo")
                        .HasColumnType("datetime")
                        .HasColumnName("fin_motivo");

                    b.Property<int>("IdAreaRequisicion")
                        .HasColumnType("int")
                        .HasColumnName("id_area_requisicion");

                    b.Property<int>("IdCargoColaboradorSolicita")
                        .HasColumnType("int")
                        .HasColumnName("id_cargo_colaborador_solicita");

                    b.Property<int>("IdCargoSolicitado")
                        .HasColumnType("int")
                        .HasColumnName("id_cargo_solicitado");

                    b.Property<int>("IdColaboradorSolicita")
                        .HasColumnType("int")
                        .HasColumnName("id_colaborador_solicita");

                    b.Property<int>("IdEstadoRequisicion")
                        .HasColumnType("int")
                        .HasColumnName("id_estado_requisicion");

                    b.Property<int>("IdJustificacionRequisicion")
                        .HasColumnType("int")
                        .HasColumnName("id_justificacion_requisicion");

                    b.Property<int>("IdMotivoRequisicion")
                        .HasColumnType("int")
                        .HasColumnName("id_motivo_requisicion");

                    b.Property<int>("IdPasoAutorizacion")
                        .HasColumnType("int")
                        .HasColumnName("id_paso_autorizacion");

                    b.Property<int>("IdSucursalRequisicion")
                        .HasColumnType("int")
                        .HasColumnName("id_sucursal_requisicion");

                    b.Property<int>("IdTipoContratacion")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_contratacion");

                    b.Property<int>("IdUsuarioCreacion")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario_creacion");

                    b.Property<int?>("IdUsuarioModificacion")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario_modificacion");

                    b.Property<DateTime?>("InicioMotivo")
                        .HasColumnType("datetime")
                        .HasColumnName("inicio_motivo");

                    b.Property<string>("MotivoRechazo")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("motivo_rechazo");

                    b.Property<string>("ObservacionesRequisicion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("observaciones_requisicion");

                    b.Property<double?>("PeriodoEvaluacionMeses")
                        .HasColumnType("float")
                        .HasColumnName("periodo_evaluacion_meses");

                    b.Property<double>("RangoInicioSalarioConfirmado")
                        .HasColumnType("float")
                        .HasColumnName("rango_inicio_salario_confirmado");

                    b.Property<bool?>("Rechazado")
                        .HasColumnType("bit")
                        .HasColumnName("rechazado");

                    b.Property<double?>("SalarioMaximoCargo")
                        .HasColumnType("float")
                        .HasColumnName("salario_maximo_cargo");

                    b.HasKey("Id");

                    b.ToTable("RequisicionPersonal", "seleccion");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Rol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IdRol")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MomentoConcurrencia");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NombreRol");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NombreRolNormalizado");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NombreRolNormalizado] IS NOT NULL");

                    b.ToTable("Roles", "seguridad");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.RolUsuarios", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUsuario");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("IdRol");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesUsuarios", "seguridad");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.TiposEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposEmpleados");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.TokenUsuario", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("IdUsuario");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("InicioSesionProveedor");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Nombre");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Valor");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("TokenUsuario", "seguridad");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IdUsuario")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("CantidadErroresAcceso");

                    b.Property<string>("CodigoConfirmacionCorreo")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Correo");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("CorreoConfirmado");

                    b.Property<DateTime?>("FechaEnvioCodigo")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("HabilitarBloquedo");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("BloquearHasta");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CorreoNormalizado");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("UsuarioNormalizado");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClaveHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Telefono");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("TelefonoConfirmado");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SelloSeguridad");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("DosFactores");

                    b.Property<DateTime>("UltimaActualizacionClave")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Usuario");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[UsuarioNormalizado] IS NOT NULL");

                    b.ToTable("Usuarios", "seguridad");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.UsuariosExterno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("ElementoExternoId")
                        .HasColumnType("int");

                    b.Property<int>("IdExterno")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElementoExternoId");

                    b.ToTable("UsuariosExterno");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Vacantes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DetallesVacante")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("detalles_vacante");

                    b.Property<bool?>("EsPublica")
                        .HasColumnType("bit")
                        .HasColumnName("es_publica");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaFinPublicacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_fin_publicacion");

                    b.Property<DateTime>("FechaInicioPublicacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_inicio_publicacion");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_modificacion");

                    b.Property<DateTime>("FechaRecepcionRequisicion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_recepcion_requisicion");

                    b.Property<int>("IdColaboradorEncargado")
                        .HasColumnType("int")
                        .HasColumnName("id_colaborador_encargado");

                    b.Property<int>("IdColaboradorRecibe")
                        .HasColumnType("int")
                        .HasColumnName("id_colaborador_recibe");

                    b.Property<int>("IdRequisicion")
                        .HasColumnType("int")
                        .HasColumnName("id_requisicion");

                    b.Property<int>("IdUsuarioCreacion")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario_creacion");

                    b.Property<int?>("IdUsuarioModificacion")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario_modificacion");

                    b.Property<double>("NivelRiesgoCargoActual")
                        .HasColumnType("float")
                        .HasColumnName("nivel_riesgo_cargo_actual");

                    b.Property<double?>("NivelRiesgoCargoPrevio")
                        .HasColumnType("float")
                        .HasColumnName("nivel_riesgo_cargo_previo");

                    b.Property<int>("TipoSeleccion")
                        .HasColumnType("int")
                        .HasColumnName("tipo_seleccion");

                    b.HasKey("Id");

                    b.HasIndex("IdRequisicion");

                    b.ToTable("Vacantes", "seleccion");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.AplicantesVacante", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.MotivosDescarte", "MotivoDescarte")
                        .WithMany("AplicantesVacantes")
                        .HasForeignKey("IdMotivoDescarte")
                        .HasConstraintName("FK__aplicante__id_mo__74DB9F4A");

                    b.HasOne("Contratacion.Datos.Models.Vacantes", "Vacante")
                        .WithMany("AplicantesVacantes")
                        .HasForeignKey("IdVacante")
                        .HasConstraintName("FK__aplicante__id_va__73E77B11")
                        .IsRequired();

                    b.Navigation("MotivoDescarte");

                    b.Navigation("Vacante");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ArchivoExterno", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Expediente", "Expediente")
                        .WithMany("ArchivoExternos")
                        .HasForeignKey("IdExpediente")
                        .HasConstraintName("FKDA21305584239BDA");

                    b.HasOne("Contratacion.Datos.Models.DocumentosRequerido", "DocumentosRequerido")
                        .WithMany("ArchivoExternos")
                        .HasForeignKey("IdTipoDocumento")
                        .HasConstraintName("FKDA21305519B7956B");

                    b.Navigation("DocumentosRequerido");

                    b.Navigation("Expediente");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Area", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Catalogo", "TipoArea")
                        .WithMany("Areas")
                        .HasForeignKey("IdTipoArea")
                        .HasConstraintName("areas_fk")
                        .IsRequired();

                    b.Navigation("TipoArea");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Cargo", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Catalogo", "CategoriaCargo")
                        .WithMany("CargoIdCategoriaCargo")
                        .HasForeignKey("IdCategoriaCargo")
                        .HasConstraintName("FKAE7C103793BB7C68")
                        .IsRequired();

                    b.HasOne("Contratacion.Datos.Models.Catalogo", "NivelEscolaridad")
                        .WithMany("CargoIdNivelEscolaridad")
                        .HasForeignKey("IdNivelEscolaridad")
                        .HasConstraintName("FKAE7C1037759105BC")
                        .IsRequired();

                    b.HasOne("Contratacion.Datos.Models.Catalogo", "TipoFuncionario")
                        .WithMany("CargoIdTipoFuncionario")
                        .HasForeignKey("IdTipoFuncionario")
                        .HasConstraintName("FKAE7C1037AD69E5D0");

                    b.Navigation("CategoriaCargo");

                    b.Navigation("NivelEscolaridad");

                    b.Navigation("TipoFuncionario");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ElementosExterno", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Cargo", "CargoAspirado")
                        .WithMany("ElementosExternos")
                        .HasForeignKey("CargoAspiradoId");

                    b.HasOne("Contratacion.Datos.Models.Catalogo", "EstadoCivil")
                        .WithMany("ElementosExternoEstadoCivil")
                        .HasForeignKey("EstadoCivilId");

                    b.HasOne("Contratacion.Datos.Models.Regiones", "RegionActual")
                        .WithMany("ExternoRegionActual")
                        .HasForeignKey("RegionActualId");

                    b.Navigation("CargoAspirado");

                    b.Navigation("EstadoCivil");

                    b.Navigation("RegionActual");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Especialidad", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Catalogo", "Estudio")
                        .WithMany("Especialidades")
                        .HasForeignKey("EstudioId");

                    b.Navigation("Estudio");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.EspecialidadExterno", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Especialidad", "Especialidad")
                        .WithMany("EspecialidadExternos")
                        .HasForeignKey("EspecialidadId");

                    b.HasOne("Contratacion.Datos.Models.ElementosExterno", "Externo")
                        .WithMany("EspecialidadExternos")
                        .HasForeignKey("ExternoId");

                    b.Navigation("Especialidad");

                    b.Navigation("Externo");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.EstudiosExterno", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Catalogo", "Estudio")
                        .WithMany("EstudiosExternoIdEstudio")
                        .HasForeignKey("EstudioId");

                    b.HasOne("Contratacion.Datos.Models.ElementosExterno", "Externo")
                        .WithMany("EstudiosExternos")
                        .HasForeignKey("ExternoId");

                    b.Navigation("Estudio");

                    b.Navigation("Externo");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Expediente", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.ElementosExterno", "Externo")
                        .WithMany("Expedientes")
                        .HasForeignKey("ExternoId");

                    b.Navigation("Externo");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ExperienciaExterno", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Catalogo", "Empresa")
                        .WithMany("ExperienciaExternos")
                        .HasForeignKey("EmpresaId");

                    b.HasOne("Contratacion.Datos.Models.ElementosExterno", "Externo")
                        .WithMany("ExperienciaExternos")
                        .HasForeignKey("ExternoId");

                    b.Navigation("Empresa");

                    b.Navigation("Externo");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.IdiomasExterno", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Catalogo", "Calificativo")
                        .WithMany("IdiomasExternoIdCalificativo")
                        .HasForeignKey("CalificativoId");

                    b.HasOne("Contratacion.Datos.Models.ElementosExterno", "ElementoExterno")
                        .WithMany("IdiomasExternos")
                        .HasForeignKey("ElementoExternoId");

                    b.Navigation("Calificativo");

                    b.Navigation("ElementoExterno");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.InicioSesionUsuario", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ReclamacionRoles", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ReclamacionUsuario", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ReferenciasExterno", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.ElementosExterno", "ElementoExterno")
                        .WithMany("ReferenciaParticularesExternos")
                        .HasForeignKey("ElementoExternoId");

                    b.HasOne("Contratacion.Datos.Models.Catalogo", "TipoReferencia")
                        .WithMany("ReferenciasExternoIdTipoReferencia")
                        .HasForeignKey("TipoReferenciaId");

                    b.Navigation("ElementoExterno");

                    b.Navigation("TipoReferencia");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.RolUsuarios", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contratacion.Datos.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contratacion.Datos.Models.TokenUsuario", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contratacion.Datos.Models.UsuariosExterno", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.ElementosExterno", "ElementoExterno")
                        .WithMany("UsuariosExternos")
                        .HasForeignKey("ElementoExternoId");

                    b.Navigation("ElementoExterno");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Vacantes", b =>
                {
                    b.HasOne("Contratacion.Datos.Models.RequisicionPersonal", "Requisicion")
                        .WithMany("Vacantes")
                        .HasForeignKey("IdRequisicion")
                        .HasConstraintName("FK__vacantes__id_req__710B0E66")
                        .IsRequired();

                    b.Navigation("Requisicion");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Cargo", b =>
                {
                    b.Navigation("ElementosExternos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Catalogo", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("CargoIdCategoriaCargo");

                    b.Navigation("CargoIdNivelEscolaridad");

                    b.Navigation("CargoIdTipoFuncionario");

                    b.Navigation("ElementosExternoEstadoCivil");

                    b.Navigation("Especialidades");

                    b.Navigation("EstudiosExternoIdEstudio");

                    b.Navigation("ExperienciaExternos");

                    b.Navigation("IdiomasExternoIdCalificativo");

                    b.Navigation("ReferenciasExternoIdTipoReferencia");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.DocumentosRequerido", b =>
                {
                    b.Navigation("ArchivoExternos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.ElementosExterno", b =>
                {
                    b.Navigation("EspecialidadExternos");

                    b.Navigation("EstudiosExternos");

                    b.Navigation("Expedientes");

                    b.Navigation("ExperienciaExternos");

                    b.Navigation("IdiomasExternos");

                    b.Navigation("ReferenciaParticularesExternos");

                    b.Navigation("UsuariosExternos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Especialidad", b =>
                {
                    b.Navigation("EspecialidadExternos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Expediente", b =>
                {
                    b.Navigation("ArchivoExternos");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.MotivosDescarte", b =>
                {
                    b.Navigation("AplicantesVacantes");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Regiones", b =>
                {
                    b.Navigation("ExternoRegionActual");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.RequisicionPersonal", b =>
                {
                    b.Navigation("Vacantes");
                });

            modelBuilder.Entity("Contratacion.Datos.Models.Vacantes", b =>
                {
                    b.Navigation("AplicantesVacantes");
                });
#pragma warning restore 612, 618
        }
    }
}
